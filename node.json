{
    "{72E9896D-9CA2-4A44-9F52-D5ED8D7B648E}": {
        "source": "const WShell = require( 'WScript.Shell' )\r\nconst { join } = require( 'pathname' )\r\nconst { writeTextFileSync, deleteFileSync } = require( 'filesystem' )\r\nconst genUUID = require( 'genUUID' )\r\n\r\nconst LF = '\\n'\r\nconst NONE = ''\r\n\r\nfunction exec_node ( code_or_spec ) {\r\n    const isCode = typeof code_or_spec === 'function'\r\n    const spec = isCode ? join( exec_node.options.__dirname.replace( /[\\{\\}]/g, '' ), genUUID() + '.js' ) : String( code_or_spec )\r\n\r\n    if ( isCode ) {\r\n        writeTextFileSync( spec, `( () => {\r\n            ( ${ String( code_or_spec ) } )( ${ JSON.stringify( exec_node.options ) } )\r\n        } )()` )\r\n    }\r\n\r\n\r\n    const { stdOut, stdErr } = WShell.Exec( `node ${ spec }` )\r\n\r\n    let outStream = []\r\n    let errStream = []\r\n\r\n\r\n    while ( !stdOut.AtEndOfStream || !stdErr.AtEndOfStream ) {\r\n        const outLine = stdOut.ReadLine()\r\n        outLine != NONE ? outStream.push( outLine ) : NONE\r\n\r\n        const errLine = stdErr.ReadLine()\r\n        errLine != NONE ? errStream.push( errLine ) : NONE\r\n    }\r\n\r\n    if ( isCode ) deleteFileSync( spec )\r\n\r\n    return { stdout: outStream.join( LF ), stderr: errStream.join( LF ) }\r\n}\r\n\r\nmodule.exports = exec_node\r\n",
        "path": "{node}/index.js",
        "mapping": {}
    }
}