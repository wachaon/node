{
    "{1E05EFF8-3E06-40FA-8A1E-90F20AEA01CB}": {
        "source": "const WShell = require( 'WScript.Shell' )\r\nconst { join, CurrentDirectory, toPosixSep } = require( 'pathname' )\r\nconst { writeTextFileSync, deleteFileSync, existsFileSync, readTextFileSync } = require( 'filesystem' )\r\nconst genUUID = require( 'genUUID' )\r\n\r\nconst LF = '\\n'\r\nconst NONE = ''\r\n\r\nfunction exec_node ( code_or_spec ) {\r\n    const isCode = typeof code_or_spec === 'function'\r\n    const source = isCode ? String( code_or_spec ) : `() => { ${ readTextFileSync( code_or_spec ) } }`\r\n    const spec = join( exec_node.options.__dirname, genUUID() + '.js' )\r\n\r\n    writeTextFileSync( spec, `( () => {\r\n        const __wesStdLog__ = ( type, ...args ) => {\r\n            const { format } = require( 'util' )\r\n            const log = format( ...args )\r\n            const uint16 = Uint16Array.from( log, ( c ) => c.charCodeAt( 0 ) )\r\n            if ( type === 'log' ) process.stdout.write( JSON.stringify( Array.from( uint16 ) ) + '\\\\n' )\r\n            else process.stderr.write( JSON.stringify( Array.from( uint16 ) ) + '\\\\n' )\r\n        }\r\n        console.log = ( ...args ) => { __wesStdLog__( 'log', ...args ) }\r\n        console.error = ( ...args ) => { __wesStdLog__( 'error', ...args ) };\r\n        ( ${ source } )( ${ JSON.stringify( exec_node.options ) } )\r\n    } )()`, 'UTF-8' )\r\n\r\n    try {\r\n        const { stdOut, stdErr } = WShell.Exec( `node ${ spec }` )\r\n        let outStream = []\r\n        let errStream = []\r\n\r\n        while ( !stdOut.AtEndOfStream ) {\r\n            const outLine = JSON.parse( stdOut.ReadLine() ).map( v => String.fromCharCode( v ) ).join( NONE )\r\n            if ( outLine != NONE ) {\r\n                if( !exec_node.options.silent ) console.print( outLine + LF )\r\n                outStream.push( outLine )\r\n            }\r\n        }\r\n\r\n        while ( !stdErr.AtEndOfStream ) {\r\n            const errLine = JSON.parse( stdErr.ReadLine() ).map( v => String.fromCharCode( v ) ).join( NONE )\r\n            if ( errLine != NONE ) {\r\n                if( !exec_node.options.silent ) console.print( errLine + LF )\r\n                errStream.push( errLine )\r\n            }\r\n        }\r\n\r\n        return { stdout: outStream.join( LF ), stderr: errStream.join( LF ) }\r\n\r\n    } catch ( error ) {\r\n\r\n    } finally {\r\n        if ( isCode && existsFileSync( spec ) ) deleteFileSync( spec )\r\n    }\r\n\r\n}\r\n\r\nexec_node.options = {\r\n    silent: false,\r\n    __dirname: toPosixSep( CurrentDirectory ),\r\n    __filename: join( CurrentDirectory, __filename.match( /(?!\\/)[^\\/]+$/ )[0] )\r\n}\r\n\r\nmodule.exports = exec_node\r\n",
        "path": "{node}/index.js",
        "mapping": {}
    }
}